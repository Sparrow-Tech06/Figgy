<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title> Multiplication Math </title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"/>

  <!-- Google Font -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet"/>

  <!-- Vue.js CDN -->
  <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>

  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"/>

  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; user-select: none; }
    body {
      font-family: 'Poppins', sans-serif;
      background-color: #fff;
    } 
    .quiz-card {
      max-width: 660px;
      margin: auto;
      margin-top: 20px;
      padding: 20px;
      border-radius: 15px;
      background: #fff;
    }
    .question-box {
      background: linear-gradient(135deg, #007bff, #20c997);
      color: #fff;
      padding: 20px;
      border-radius: 12px;
      font-size: 1.2rem;
      font-weight: 600;
      text-align: center;
      min-height: 120px;
      line-height: 110px;
    }
    .answer-input {
      border-radius: 5px;
      color: #007bff;
      caret-color: #007bff;
      transition: all 0.3s ease;
      outline: none !important;
      border: 2px solid transparent;
      background-image: linear-gradient(white, white), linear-gradient(to right, #00c6ff, #0072ff);
      background-origin: border-box;
      background-clip: padding-box, border-box;
      text-align: center;
      font-size: 1.2rem;
      padding: 10px;
    }
    .answer-input:focus {
      outline: none !important;
      border: 2px solid transparent;
      background-image: linear-gradient(white, white), linear-gradient(to right, #00c6ff, #0072ff);
      background-origin: border-box;
      background-clip: padding-box, border-box;
      color: #007bff;
    }

    /* Snackbar */
    #snackbar {
      visibility: hidden;
      min-width: 60px;
      max-width: 180px;
      color: #fff;
      text-align: center;
      border-radius: 8px;
      padding: 12px;
      position: fixed;
      z-index: 9999;
      left: 50%;
      bottom: 50px;
      transform: translateX(-50%);
      font-size: 0.80rem;
    }
    #snackbar.show {
      visibility: visible;
      animation: fadein 0.5s, fadeout 0.5s 2.5s;
    }
    @keyframes fadein {
      from { bottom: 0; opacity: 0; }
      to { bottom: 50px; opacity: 1; }
    }
    @keyframes fadeout {
      from { bottom: 50px; opacity: 1; }
      to { bottom: 0; opacity: 0; }
    }

    .modal-content {
      border-radius: 20px;
      box-shadow: 0 5px 25px rgba(0,0,0,0.2);
    }
    .confetti {
      position: absolute;
      top: 0; left: 0;
      width: 100%; height: 100%;
      pointer-events: none;
    }
    .congrats-container {
      position: relative;
      width: 100px;
      height: 100px;
      margin: 0 auto 20px;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .congrats-img {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      border: 3px solid #fff;
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
      position: relative;
      z-index: 10;
      object-fit: cover;
      background: linear-gradient(45deg, #ff6b6b, #ffa502);
    }
    .wave {
      position: absolute;
      border-radius: 50%;
      border: 4px solid #007bff;
      opacity: 0;
      animation: waveEffect 2s ease-in-out infinite;
      box-shadow: 0 0 10px rgba(0, 114, 255, 0.4);
      z-index: 1;
    }
    .wave-1 { width: 100%; height: 100%; animation-delay: 0s; }
    .wave-2 { width: 100%; height: 100%; animation-delay: 0.8s; }

    @keyframes waveEffect {
      0% { transform: scale(0.8); opacity: 0.7; }
      70% { opacity: 0.3; }
      100% { transform: scale(1.4); opacity: 0; }
    }

    .fade-slide-enter-active, .fade-slide-leave-active {
      transition: all 0.4s ease;
    }
    .fade-slide-enter-from { opacity: 0; transform: translateY(-20px); }
    .fade-slide-enter-to   { opacity: 1; transform: translateY(0); }
    .fade-slide-leave-from { opacity: 1; transform: translateY(0); }
    .fade-slide-leave-to   { opacity: 0; transform: translateY(20px); }
  </style>
</head>
<body>

<div id="app">
  <!-- Header -->
  <nav class="navbar bg-white shadow-sm">
    <div class="container-fluid">
      <a href="#" class="btn btn-light rounded-circle">
        <i class="bi bi-arrow-left"></i>
      </a>
      <span class="navbar-brand mb-0 h5 fw-bold">Math Quiz</span>
    </div>
  </nav>

  <!-- Quiz Card -->
  <div class="quiz-card">
    <div class="mb-3 text-end">
      <span class="badge bg-danger">Today Quiz</span>
      <span class="badge bg-success">{{ todayCount }}</span>
    </div>

    <div class="question-box mb-3">
      <transition name="fade-slide" mode="out-in">
        <span :key="num1 + '-' + num2">
          What is Result of {{ num1 }} Ã— {{ num2 }} ?
        </span>
      </transition>
    </div>

    <input type="number" class="form-control answer-input mt-5 mb-3" placeholder="Enter answer" v-model="userAnswer"/>

    <!-- Buttons Row -->
    <div class="row g-2">
      <div class="col-8">
        <button class="btn btn-primary w-100 fw-semibold" @click="checkAnswer">
          <i class="bi bi-check-circle me-1"></i> Submit
        </button>
      </div>
      <div class="col-4">
        <button class="btn btn-warning w-100 fw-semibold" :disabled="hintCooldown > 0" @click="showHint">
          <i class="bi bi-lightbulb me-1"></i>
          {{ hintCooldown > 0 ? 'Hint (' + hintCooldown + 's)' : 'Hint' }}
        </button>
      </div>
    </div>
  </div>

  <!-- Snackbar -->
  <div :class="['text-white', snackbarClass, showSnackbarClass]" id="snackbar">
    <i :class="snackbarIcon + ' me-1'"></i> {{ snackbarMessage }}
  </div>

  <!-- Well Done Modal -->
  <div class="modal fade" id="wellDoneModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered position-relative">
      <canvas class="confetti"></canvas>
      <div class="modal-content text-center p-4">
        <div class="congrats-container">
          <div class="wave wave-1"></div>
          <div class="wave wave-2"></div>
          <img src="https://img.icons8.com/color/96/000000/confetti.png" alt="Congrats" class="congrats-img" />
        </div>
        <h4 class="mt-2 fw-bold text-primary">Well Done!</h4>
        <p>You solved it correctly ðŸŽ‰</p>
        <button class="btn btn-primary w-100" @click="nextQuestion">
          <i class="bi bi-arrow-right-circle me-1"></i> Next Question
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<script>
const { createApp } = Vue;

createApp({
  data() {
    return {
      num1: 0,
      num2: 0,
      userAnswer: '',
      todayCount: 0,
      modalInstance: null,
      hintCooldown: 0,
      hintTimer: null,
      snackbarMessage: '',
      snackbarClass: 'bg-danger',
      snackbarIcon: 'bi-x-circle',
      showSnackbarClass: ''
    }
  },
  methods: {
    generateQuestion() {
      // 1st number: always 2 digits (10â€“99)
      this.num1 = Math.floor(Math.random() * 90) + 10;
      // 2nd number: always 1 digit (1â€“9)
      this.num2 = Math.floor(Math.random() * 9) + 1;
      this.userAnswer = '';
    },
    checkAnswer() {
      let correctAnswer = this.num1 * this.num2;
      if (parseInt(this.userAnswer) === correctAnswer) {
        this.todayCount++;
        localStorage.setItem('quizCount', this.todayCount);
        localStorage.setItem('quizDate', new Date().toDateString());

        this.modalInstance = new bootstrap.Modal(document.getElementById('wellDoneModal'));
        this.modalInstance.show();
        this.launchConfetti();
      } else {
        this.showSnackbar("Wrong Answer! Try Again.", "error");
      }
    },
    nextQuestion() {
      this.modalInstance.hide();
      this.generateQuestion();
    },
    showSnackbar(message = "Wrong Answer!", type = "error") {
      this.snackbarMessage = message;
      this.snackbarClass = type === "hint" ? 'bg-success' : 'bg-danger';
      this.snackbarIcon = type === "hint" ? 'bi-lightbulb' : 'bi-x-circle';
      this.showSnackbarClass = "show";

      setTimeout(() => {
        this.showSnackbarClass = '';
      }, 3000);
    },
    launchConfetti() {
      const canvas = document.querySelector('.confetti');
      const ctx = canvas.getContext('2d');
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;

      const confettiPieces = [];
      for (let i = 0; i < 80; i++) {
        confettiPieces.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height - canvas.height,
          w: 6,
          h: 6,
          color: `hsl(${Math.random() * 360}, 100%, 50%)`,
          speed: Math.random() * 3 + 2
        });
      }

      function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        confettiPieces.forEach(p => {
          ctx.fillStyle = p.color;
          ctx.fillRect(p.x, p.y, p.w, p.h);
        });
      }

      function update() {
        confettiPieces.forEach(p => {
          p.y += p.speed;
          if (p.y > canvas.height) p.y = -10;
        });
      }

      function loop() {
        draw();
        update();
        requestAnimationFrame(loop);
      }

      loop();
      setTimeout(() => { ctx.clearRect(0, 0, canvas.width, canvas.height); }, 3000);
    },
    checkReset() {
      let savedDate = localStorage.getItem('quizDate');
      let today = new Date().toDateString();
      if (savedDate !== today) {
        this.todayCount = 0;
        localStorage.setItem('quizCount', 0);
        localStorage.setItem('quizDate', today);
      } else {
        this.todayCount = parseInt(localStorage.getItem('quizCount')) || 0;
      }
    },
    showHint() {
      if (this.hintCooldown > 0) return;
      this.showSnackbar(`Hint: ${this.num1 * this.num2}`, "hint");
      this.hintCooldown = 10;
      this.hintTimer = setInterval(() => {
        this.hintCooldown--;
        if (this.hintCooldown === 0) {
          clearInterval(this.hintTimer);
          this.hintTimer = null;
        }
      }, 1000);
    }
  },
  mounted() {
    this.checkReset();
    this.generateQuestion();
  }
}).mount('#app');
</script>

</body>
</html>
